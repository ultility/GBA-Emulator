#pragma once
#include "datasize.h"
#include <stdint.h>

enum arm_instruction_formats
{
    BRANCH_AND_EXCHANGE_FORMAT = 0b100101111111111110001 << 5,
    BLOCK_DATA_TRANSFER_FORMAT = 0b100 << 25,
    BRANCH_FORMAT = 0b101 << 25,
    SOFTWARE_INTERRUPT_FORMAT = 0b1111 << 24,
    UNDEFINED_FORMAT = 0b011 << 25 | 0b1 << 4,
    SINGLE_DATA_TRANSFER_FORMAT = 0b01 << 26,
    SINGLE_DATA_SWAP_FORMAT = 0b00010 << 23 | 0b00001001 << 4,
    MULTIPLY_FORMAT = 0b00000 << 23 | 0b1001 << 4,
    MULTIPLY_LONG_FORMAT = 0b00001 << 23 | 0b1001 << 4,
    HALFWORD_DATA_TRANSFER_FORMAT = 0b000 << 25 | 0b1 << 7 | 0b1 << 4,
    PSR_TRANSFER_FORMAT = 0b00 << 26 | 0b10 << 23,
    DATA_PROCCESSING_FORMAT = 0b00 << 26
};

enum arm_instruction_masks
{
    BRANCH_AND_EXCHANGE_MASK = 0b111111111111111111111 << 5,
    BLOCK_DATA_TRANSFER_MASK = 0b111 << 25,
    BRANCH_MASK = 0b111 << 25,
    SOFTWARE_INTERRUPT_MASK = 0b1111 << 24,
    UNDEFINED_MASK = 0b111 << 25 | 0b1 << 4,
    SINGLE_DATA_TRANSFER_MASK = 0b11 << 26,
    SINGLE_DATA_SWAP_MASK = 0b11111 << 23 | 0b11111111 << 4,
    MULTIPLY_MASK = 0b11111 << 23 | 0b1111 << 4,
    MULTIPLY_LONG_MASK = 0b11111 << 23 | 0b1111 << 4,
    HALFWORD_DATA_TRANSFER_MASK = 0b111 << 25 | 0b1 << 7 | 0b1 << 4,
    PSR_TRANSFER_MASK = 0b11 << 26 | 0b11 << 23,
    DATA_PROCCESSING_MASK = 0b11 << 26
};

enum arm_instructions
{
    BRANCH_AND_EXCHANGE,
    BLOCK_DATA_TRANSFER,
    BRANCH,
    SOFTWARE_INTERRUPT,
    UNDEFINED,
    SINGLE_DATA_TRANSFER,
    SINGLE_DATA_SWAP,
    MULTIPLY,
    HALFWORD_DATA_TRANSFER,
    PSR_TRANSFER,
    DATA_PROCCESSING,
    UNIMPLEMENTED_INSTRUCTION
};

enum thumb_instruction_format
{
    THUMB_SOFTWARE_INTERRUPT_FORMAT = 0b11011111 << 8,
    THUMB_UNCONDITIONAL_BRANCH_FORMAT = 0b11100 << 11,
    THUMB_CONDITIONAL_BRANCH_FORMAT = 0b1101 << 12,
    THUMB_MULTI_LOAD_STORE_FORMAT = 0b1100 << 12,
    THUMB_LONG_BRANCH_LINK_FORMAT = 0b1111 << 12,
    THUMB_OFFSET_SP_FORMAT = 0b10110000 << 8,
    THUMB_PUSH_POP_STACK_FORMAT = 0b1011 << 12 | 0b10 << 9,
    THUMB_LOAD_STORE_HALFWORD_FORMAT = 0b1000 << 12,
    THUMB_SP_RELATIVE_LOAD_STORE_FORMAT = 0b1001,
    THUMB_LOAD_ADDRESS_FORMAT = 0b1010 << 12,
    THUMB_IMMEDIATE_OFFSET_LOAD_STORE_FORMAT = 0b011 << 13,
    THUMB_REG_OFFSET_LOAD_STORE_FORMAT = 0b0101 << 12 | 0b0 << 9,
    // THUMB_LOAD_STORE_SIGN_EXTENDED_FORMAT 0b <<
};

enum conditions
{
    EQ = 0,
    NE,
    BEQ,
    LO,
    MI,
    PL,
    VS,
    VC,
    HI,
    LS,
    GE,
    LT,
    GT,
    LE,
    AL,
    NV,
};