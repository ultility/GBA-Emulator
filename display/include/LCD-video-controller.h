#include "data_sizes.h"
#include "requests.h"

enum LCD_video_controller_registers {
    LCD_IO_DISPLAY_CONTROL = 0,
    LCD_IO_STATUS,
    LCD_VCOUNT,
    // 4 background layers
    LCD_IO_BG_CONTROL, 
    // 4 background layers and 2 offsets per layer
    LCD_IO_BG_SCROLLING = LCD_IO_BG_CONTROL + 4, 
    // 2 background layer (BG2 + 3), 2 offsets per layer, 2 registers per offset, 2 scaling and 2 rotation per layer
    LCD_IO_BG_ROTATATION_AND_SCALING = LCD_IO_BG_SCROLLING + (4 * 2), 
    LCD_IO_WINDOW_FEATURES = LCD_IO_BG_ROTATATION_AND_SCALING + (2 * ((2 * 2) + 2 + 2)),
    LCD_IO_MOSAIC_FUNCTION,
    LCD_IO_COLOR_SPECIAL_EFFECTS,
    LCD_VIDEO_CONTROLLER_REGISTERS_COUNT
};

enum LCD_IO_DISPLAY_REGISTER_BIT_POSITIONS {
    BG_MODE_POS = 0,
    GBC_MODE_POS = 3,
    DISPLAY_FRAME_SELECT_POS = 4,
    H_BLANK_INTERVAL_FREE_POS = 5,
    OBJ_CHARACTER_VRAM_MAPPING_POS = 6,
    FORCED_BLANK_POS = 7,
    SCREEN_DISPLAY_BG0_POS = 8, 
    SCREEN_DISPLAY_BG1_POS = 9,
    SCREEN_DISPLAY_BG2_POS = 10,
    SCREEN_DISPLAY_BG3_POS = 11,
    SCREEN_DISPLAY_OBJ_POS = 12,
    WINDOW_0_DISPLAY_FLAG_POS = 13, 
    WINDOW_1_DISPLAY_FLAG_POS = 14,
    OBJ_WINDOW_DISPLAY_FLAG_POS = 15,
};

enum LCD_IO_DISPLAY_REGISTER_BIT_FIELDS {
    BG_MODE = 0b111 << BG_MODE_POS,
    GBC_MODE = 0b1 << GBC_MODE_POS,
    DISPLAY_FRAME_SELECT = 0b1 << DISPLAY_FRAME_SELECT_POS,
    H_BLANK_INTERVAL_FREE = 0b1 << H_BLANK_INTERVAL_FREE_POS,
    OBJ_CHARACTER_VRAM_MAPPING = 0b1 << OBJ_CHARACTER_VRAM_MAPPING_POS,
    FORCED_BLANK = 0b1 << FORCED_BLANK_POS,
    SCREEN_DISPLAY_BG0 = 0b1 << SCREEN_DISPLAY_BG0_POS,
    SCREEN_DISPLAY_BG1 = 0b1 << SCREEN_DISPLAY_BG1_POS,
    SCREEN_DISPLAY_BG2 = 0b1 << SCREEN_DISPLAY_BG2_POS,
    SCREEN_DISPLAY_BG3 = 0b1 << SCREEN_DISPLAY_BG3_POS,
    SCREEN_DISPLAY_OBJ = 0b1 << SCREEN_DISPLAY_OBJ_POS,
    WINDOW_0_DISPLAY_FLAG = 0b1 << WINDOW_0_DISPLAY_FLAG_POS,
    WINDOW_1_DISPLAY_FLAG = 0b1 << WINDOW_1_DISPLAY_FLAG_POS,
    OBJ_WINDOW_DISPLAY_FLAG = 0b1 << OBJ_WINDOW_DISPLAY_FLAG_POS,
};

enum LCD_IO_STATUS_REGISTER_BIT_POSITIONS {
    V_BLANK_FLAG_POS = 0,
    H_BLANK_FLAG_POS = 1,
    V_COUNTER_FLAG_POS = 2,
    V_BLANK_IRQ_ENABLE_POS = 3,
    H_BLANK_IRQ_ENABLE_POS = 4,
    V_COUNTER_IRQ_ENABLE_POS = 5,
    V_COUNT_SETTING_POS = 8,
};

enum LCD_IO_STATUS_REGISTER_BIT_FIELDS {
    V_BLANK_FLAG = 0b1 << V_BLANK_FLAG_POS,
    H_BLANK_FLAG = 0b1 << H_BLANK_FLAG_POS,
    V_COUNTER_FLAG = 0b1 << V_COUNTER_FLAG_POS,
    V_BLANK_IRQ_ENABLE = 0b1 << V_BLANK_IRQ_ENABLE_POS,
    H_BLANK_IRQ_ENABLE = 0b1 << H_BLANK_IRQ_ENABLE_POS,
    V_COUNTER_IRQ_ENABLE = 0b1 << V_COUNTER_IRQ_ENABLE_POS,
    V_COUNT_SETTING = 0b11111111 << V_COUNT_SETTING_POS,
};

enum LCD_VCOUNT_REGISTER_BIT_FIELDS {
    CURRENT_SCANLINE = 0b11111111,
};

enum LCD_IO_BG_CONTROL_REGISTER_BIT_POSITIONS {
    BG_PRIORITY_POS = 0,
    CHARACTER_BASE_BLOCK_POS = 2,
    MOSAIC_POS = 6,
    PALLETS_POS = 7,
    SCREEN_BASE_BLOCK_POS = 8,
    DISPLAY_AREA_OVERFLOW_POS = 13,
    SCREEN_SIZE_POS = 14,
};

enum LCD_IO_BG_CONTROL_REGISTER_BIT_FIELDS {
    BG_PRIORITY = 0b11 << BG_PRIORITY_POS,
    CHARACTER_BASE_BLOCK = 0b11 << CHARACTER_BASE_BLOCK_POS,
    MOSAIC = 0b1 << MOSAIC_POS,
    PALLETS = 0b1 << PALLETS_POS,
    SCREEN_BASE_BLOCK = 0b11111 << SCREEN_BASE_BLOCK_POS,
    DISPLAY_AREA_OVERFLOW = 0b1 << DISPLAY_AREA_OVERFLOW_POS, // not used in BG 1 and 2
    SCREEN_SIZE = 0b11 << SCREEN_SIZE_POS,
};

enum LCD_IO_BG_SCROLLING_REGISTER_BIT_FIELDS {
    SCROLL = 0b111111111
};

enum LCD_IO_BG_ROTATION_AND_SCALING_REGISTER_BIT_POSITIONS {
    ROTATION_POS = 0,
    SCALING_POS = 3,
};

enum LCD_IO_BG_ROTATATION_AND_SCALING_REGISTER_BIT_FIELDS {
    ROTATION = 0b111,
    SCALING = 0b111111111
};

struct LCD_video_controller {
    HALF_WORD registers[LCD_VIDEO_CONTROLLER_REGISTERS_COUNT];
};

void LCD_video_controller_init(struct LCD_video_controller* lcd);

void LCD_video_controller_process_request(struct LCD_video_controller* lcd, struct request_data* request);